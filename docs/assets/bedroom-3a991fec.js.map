{"version":3,"file":"bedroom-3a991fec.js","sources":["../../src/shaders/hologram/vertex.glsl","../../src/shaders/hologram/fragment.glsl","../../src/shaders/hologram/fragment2.glsl","../../src/bedroom/bedroom.ts"],"sourcesContent":["varying vec3 vPosition;\nvarying vec3 vNormal;\n\nvoid main() {\n\n    vec4 modelPosition = modelMatrix * vec4(position,1.0);\n\n    // Final position\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\n\n\n    // Model normal\n    vec4 modelNormal = modelMatrix * vec4(normal, 0.0);\n\n    // Varying\n    vPosition = modelPosition.xyz;\n    vNormal = modelNormal.xyz;\n}","uniform float uTime;\nuniform vec3 uColor;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n\n\n\nvoid main() {\n    // Normal\n    vec3 normal = normalize(vNormal);\n    if(!gl_FrontFacing) {\n        normal *= -1.0;\n    }\n    //Stripes\n    float stripes = mod((vPosition.y + uTime * 0.08) * 20.0,1.0);\n    stripes = pow(stripes, 3.0);\n\n    // Fresnel\n    vec3 viewDirection = normalize(vPosition - cameraPosition);\n    float fresnel = dot(viewDirection, normal) + 1.0;\n    fresnel = pow(fresnel, 2.0);\n\n    // Falloff\n    float falloff = smoothstep(0.8, 0.0, fresnel);\n\n    // Holographic\n    float holographic = stripes * fresnel;\n    holographic += fresnel * 1.25;\n    holographic *= falloff;\n\n\n    // Final color\n    gl_FragColor = vec4(uColor, holographic);\n\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n}","uniform float uTime;\nuniform vec3 uColor;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n\n\n\nvoid main() {\n    // Normal\n    vec3 normal = normalize(vNormal);\n    if(!gl_FrontFacing) {\n        normal *= -1.0;\n    }\n\n    // Fresnel\n    vec3 viewDirection = normalize(vPosition - cameraPosition);\n    float fresnel = dot(viewDirection, normal) + 1.0;\n    fresnel = pow(fresnel, 1.5);\n\n    // Falloff\n    float falloff = smoothstep(0.8, 0.0, fresnel);\n\n    // Holographic\n    float holographic =  fresnel;\n    holographic += fresnel * 1.25;\n    holographic *= falloff;\n\n\n    // Final color\n    gl_FragColor = vec4(uColor, holographic);\n\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n}","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\nimport overlayVertexShader from '../shaders/overlay/vertex.glsl';\nimport overlayFragmentShader from '../shaders/overlay/fragment.glsl';\nimport holographicVertexShader from '../shaders/hologram/vertex.glsl';\nimport holographicFragmentShader from '../shaders/hologram/fragment.glsl';\nimport holographicFragmentShader2 from '../shaders/hologram/fragment2.glsl';\nimport gsap from 'gsap';\n\n/**\n * Base\n */\nconst canvas = (document.querySelector('canvas.webgl') || undefined) as HTMLCanvasElement | undefined;\n\nconst scene = new THREE.Scene();\n\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\ncamera.position.x = 1;\ncamera.position.y = 2;\ncamera.position.z = 4;\nscene.add(camera);\n\nconst renderer = new THREE.WebGLRenderer({ canvas, antialias: false });\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nwindow.addEventListener('resize', () => {\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n\n  camera.aspect = sizes.width / sizes.height;\n  camera.updateProjectionMatrix();\n\n  renderer.setSize(sizes.width, sizes.height);\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\nrenderer.shadowMap.enabled = true;\n\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\ncontrols.minDistance = 2;\ncontrols.maxDistance = 10;\ncontrols.addEventListener('change', () => {\n  const distance = camera.position.distanceTo(new THREE.Vector3(-1.4, 0.18, 0.07));\n  camera.fov = distance * 10;\n  camera.updateProjectionMatrix();\n});\n\nconst mouse = new THREE.Vector2();\nwindow.addEventListener('mousemove', (event) => {\n  mouse.x = (event.clientX / sizes.width) * 2 - 1;\n  mouse.y = -(event.clientY / sizes.height) * 2 + 1;\n});\n\nconst raycaster = new THREE.Raycaster();\nconst rayDirection = new THREE.Vector3(10, 0, 0);\nrayDirection.normalize();\n\n/**\n * Loaders\n */\nconst loadingElement = document.querySelector('.loading');\nconst loadingManager = new THREE.LoadingManager(\n  () => {\n    gsap.to(overlayMaterial.uniforms.uAlpha, {\n      duration: 1,\n      value: 0,\n      delay: 0.3,\n    });\n\n    if (window.innerWidth > 768) {\n      gsap.to(camera.position, {\n        duration: 1,\n        x: 1,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        y: 2.5,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        z: 4.5,\n        delay: 0.3,\n      });\n\n      controls.target.set(1, 2.3, 1);\n    } else {\n      gsap.to(camera.position, {\n        duration: 1,\n        x: -1.0,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        y: 3.0,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        z: 7.2,\n        delay: 0.3,\n      });\n\n      controls.target.set(-1, 1.2, 1);\n    }\n\n    if (!loadingElement) return;\n    setTimeout(() => {\n      loadingElement.remove();\n    }, 3000);\n  },\n  // Progress\n  (_, itemsLoaded, itemsTotal) => {\n    const progressRatio = itemsLoaded / itemsTotal;\n    if (!loadingElement) return;\n    loadingElement.innerHTML = `${Math.round(progressRatio * 100)}%`;\n  }\n);\n\nconst textureLoader = new THREE.TextureLoader(loadingManager);\nconst gltfLoader = new GLTFLoader(loadingManager).setDRACOLoader(new DRACOLoader().setDecoderPath('draco/'));\n\n/**\n * Environment map\n */\nconst environmentMap = textureLoader.load('/threejs-my-house-interior/environment/environment.jpg');\nconst environmentMap2 = textureLoader.load('/threejs-my-house-interior/environment/environment2.jpg');\nconst backGroundEnvironment = textureLoader.load('/threejs-my-house-interior/environment/night_skyscraper.jpg');\nenvironmentMap.mapping = THREE.EquirectangularReflectionMapping;\nenvironmentMap.colorSpace = THREE.SRGBColorSpace;\nenvironmentMap2.mapping = THREE.EquirectangularReflectionMapping;\nenvironmentMap2.colorSpace = THREE.SRGBColorSpace;\nbackGroundEnvironment.mapping = THREE.EquirectangularReflectionMapping;\nbackGroundEnvironment.colorSpace = THREE.SRGBColorSpace;\nscene.background = backGroundEnvironment;\n\n/**\n * Textures\n */\nconst bakedTexture = textureLoader.load('/threejs-my-house-interior/bedroomBaked.jpg');\nbakedTexture.flipY = false;\nbakedTexture.colorSpace = THREE.SRGBColorSpace;\n\n/**\n * Materials\n */\nconst bakedMaterial = new THREE.MeshBasicMaterial({ map: bakedTexture });\n\nconst glassMaterial = new THREE.MeshPhysicalMaterial({\n  metalness: 0,\n  roughness: 0,\n  transmission: 0.95,\n  opacity: 1,\n  ior: 1.95,\n  envMap: environmentMap2,\n});\n\nconst hologramMaterial = new THREE.ShaderMaterial({\n  vertexShader: holographicVertexShader,\n  fragmentShader: holographicFragmentShader,\n  uniforms: {\n    uTime: { value: 0 },\n    uColor: new THREE.Uniform(new THREE.Color(0x0080ff)),\n  },\n  // transparent: true,\n  side: THREE.DoubleSide,\n  depthWrite: false,\n  blending: THREE.AdditiveBlending,\n});\n\nconst hologramBeamMaterial = new THREE.ShaderMaterial({\n  vertexShader: holographicVertexShader,\n  fragmentShader: holographicFragmentShader2,\n  uniforms: {\n    uTime: { value: 0 },\n    uColor: new THREE.Uniform(new THREE.Color(0x0080ff)),\n  },\n  // transparent: true,\n  side: THREE.DoubleSide,\n  depthWrite: false,\n  blending: THREE.AdditiveBlending,\n  opacity: 0.5,\n});\n\nconst lightBulbMaterial1 = new THREE.MeshBasicMaterial({ color: 0xfedcbd });\n\nconst overlayMaterial = new THREE.ShaderMaterial({\n  transparent: true,\n  uniforms: {\n    uAlpha: { value: 1.0 },\n  },\n  vertexShader: overlayVertexShader,\n  fragmentShader: overlayFragmentShader,\n});\n\n/**\n * Custom Models\n */\ngltfLoader.load('/threejs-my-house-interior/bedroom.glb', (gltf) => {\n  scene.add(gltf.scene);\n  gltf.scene.traverse((child) => {\n    const mesh = child as THREE.Mesh;\n\n    mesh.material = (() => {\n      if (['TableGlass', 'BottledGlass'].includes(mesh.name)) return glassMaterial;\n      if (['BottledLight'].includes(mesh.name)) return lightBulbMaterial1;\n      if (['HologramBeam'].includes(mesh.name)) return hologramBeamMaterial;\n      if (['HologramScreen'].includes(mesh.name)) return hologramMaterial;\n      return bakedMaterial;\n    })();\n  });\n});\n\n/**\n *  Builtin Models\n */\nconst torusKnot = new THREE.Mesh(new THREE.TorusKnotGeometry(0.15, 0.07, 80), hologramMaterial);\ntorusKnot.position.set(2.8, 2.4, 0.5);\nscene.add(torusKnot);\n\n/**\n * Overlay\n */\nconst overlayGeometry = new THREE.PlaneGeometry(2, 2, 1, 1);\nconst overlay = new THREE.Mesh(overlayGeometry, overlayMaterial);\nscene.add(overlay);\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\nconst hologramSpeed = { x: 0.2, y: 0.2 };\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime();\n\n  hologramMaterial.uniforms.uTime.value = elapsedTime;\n  torusKnot.rotation.x = elapsedTime * hologramSpeed.x;\n  torusKnot.rotation.y = elapsedTime * hologramSpeed.y;\n\n  raycaster.setFromCamera(mouse, camera);\n\n  const modelIntersects = raycaster.intersectObjects([torusKnot]);\n\n  if (modelIntersects.length) {\n    hologramSpeed.y = 10;\n  } else {\n    // FIXME: 要調整\n    const anime = gsap.to(hologramSpeed, {\n      duration: 0.3,\n      y: 0.2,\n    });\n    if (anime.isActive()) {\n      return;\n    }\n    anime.play();\n  }\n\n  controls.update();\n  renderer.render(scene, camera);\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n"],"names":["vertex_default","fragment_default","fragment2_default","canvas","scene","THREE.Scene","sizes","camera","THREE.PerspectiveCamera","renderer","THREE.WebGLRenderer","controls","OrbitControls","distance","THREE.Vector3","mouse","THREE.Vector2","event","raycaster","THREE.Raycaster","rayDirection","loadingElement","loadingManager","THREE.LoadingManager","gsap","overlayMaterial","_","itemsLoaded","itemsTotal","progressRatio","textureLoader","THREE.TextureLoader","gltfLoader","GLTFLoader","DRACOLoader","environmentMap","environmentMap2","backGroundEnvironment","THREE.EquirectangularReflectionMapping","THREE.SRGBColorSpace","bakedTexture","bakedMaterial","THREE.MeshBasicMaterial","glassMaterial","THREE.MeshPhysicalMaterial","hologramMaterial","THREE.ShaderMaterial","holographicVertexShader","holographicFragmentShader","THREE.Uniform","THREE.Color","THREE.DoubleSide","THREE.AdditiveBlending","hologramBeamMaterial","holographicFragmentShader2","lightBulbMaterial1","overlayVertexShader","overlayFragmentShader","gltf","child","mesh","torusKnot","THREE.Mesh","THREE.TorusKnotGeometry","overlayGeometry","THREE.PlaneGeometry","overlay","clock","THREE.Clock","hologramSpeed","tick","elapsedTime","anime"],"mappings":"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"}