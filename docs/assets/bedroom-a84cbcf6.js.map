{"version":3,"file":"bedroom-a84cbcf6.js","sources":["../../src/bedroom/bedroom.ts"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\nimport overlayVertexShader from '../shaders/overlay/vertex.glsl';\nimport overlayFragmentShader from '../shaders/overlay/fragment.glsl';\nimport gsap from 'gsap';\n\n/**\n * Base\n */\nconst canvas = (document.querySelector('canvas.webgl') || undefined) as HTMLCanvasElement | undefined;\n\nconst scene = new THREE.Scene();\n\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\ncamera.position.x = -2;\ncamera.position.y = 6.5;\ncamera.position.z = 4;\nscene.add(camera);\n\nconst renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nwindow.addEventListener('resize', () => {\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n\n  camera.aspect = sizes.width / sizes.height;\n  camera.updateProjectionMatrix();\n\n  renderer.setSize(sizes.width, sizes.height);\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\nrenderer.shadowMap.enabled = true;\n\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\ncontrols.minDistance = 2;\ncontrols.maxDistance = 10;\ncontrols.addEventListener('change', () => {\n  const distance = camera.position.distanceTo(new THREE.Vector3(-1.4, 0.18, 0.07));\n  camera.fov = distance * 10;\n  camera.updateProjectionMatrix();\n});\n\nconst mouse = new THREE.Vector2();\nwindow.addEventListener('mousemove', (event) => {\n  mouse.x = (event.clientX / sizes.width) * 2 - 1;\n  mouse.y = -(event.clientY / sizes.height) * 2 + 1;\n});\n\nconst raycaster = new THREE.Raycaster();\nconst rayDirection = new THREE.Vector3(10, 0, 0);\nrayDirection.normalize();\n\n/**\n * Loaders\n */\nconst loadingElement = document.querySelector('.loading');\nconst loadingManager = new THREE.LoadingManager(\n  () => {\n    gsap.to(overlayMaterial.uniforms.uAlpha, {\n      duration: 1,\n      value: 0,\n      delay: 0.3,\n    });\n\n    if (window.innerWidth > 768) {\n      camera.position.x = -3.07;\n      camera.position.y = 0.93;\n      camera.position.z = 3.41;\n\n      gsap.to(camera.position, {\n        duration: 1,\n        x: -5,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        y: 2.2,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        z: 4,\n        delay: 0.3,\n      });\n\n      controls.target.set(-0.5, 1.2, 0);\n    } else {\n      camera.position.x = -3.07;\n      camera.position.y = 0.93;\n      camera.position.z = 3.41;\n\n      gsap.to(camera.position, {\n        duration: 1,\n        x: -1.0,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        y: 3.0,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        z: 7.2,\n        delay: 0.3,\n      });\n\n      controls.target.set(-1, 1.2, 1);\n    }\n\n    if (!loadingElement) return;\n    setTimeout(() => {\n      loadingElement.remove();\n    }, 3000);\n  },\n  // Progress\n  (_, itemsLoaded, itemsTotal) => {\n    const progressRatio = itemsLoaded / itemsTotal;\n    if (!loadingElement) return;\n    loadingElement.innerHTML = `${Math.round(progressRatio * 100)}%`;\n  }\n);\n\nconst textureLoader = new THREE.TextureLoader(loadingManager);\nconst gltfLoader = new GLTFLoader(loadingManager).setDRACOLoader(new DRACOLoader().setDecoderPath('draco/'));\n\n/**\n * Environment map\n */\nconst environmentMap = textureLoader.load('/environment/environment.jpg');\nconst environmentMap2 = textureLoader.load('environment/environment2.jpg');\nconst backGroundEnvironment = textureLoader.load('environment/night_skyscraper.jpg');\nenvironmentMap.mapping = THREE.EquirectangularReflectionMapping;\nenvironmentMap.colorSpace = THREE.SRGBColorSpace;\nenvironmentMap2.mapping = THREE.EquirectangularReflectionMapping;\nenvironmentMap2.colorSpace = THREE.SRGBColorSpace;\nbackGroundEnvironment.mapping = THREE.EquirectangularReflectionMapping;\nbackGroundEnvironment.colorSpace = THREE.SRGBColorSpace;\nscene.background = backGroundEnvironment;\n\n/**\n * Textures\n */\nconst bakedTexture = textureLoader.load('/bedroomBaked.jpg');\nbakedTexture.flipY = false;\nbakedTexture.colorSpace = THREE.SRGBColorSpace;\n\n/**\n * Materials\n */\nconst bakedMaterial = new THREE.MeshBasicMaterial({ map: bakedTexture });\n\nconst glassMaterial = new THREE.MeshPhysicalMaterial({\n  metalness: 0,\n  roughness: 0,\n  transmission: 0.95,\n  opacity: 1,\n  ior: 1.95,\n  envMap: environmentMap2,\n});\n\nconst glassMaterial2 = new THREE.MeshPhysicalMaterial({\n  metalness: 0,\n  roughness: 0,\n  envMapIntensity: 1,\n  transmission: 0.95,\n  transparent: true,\n  ior: 1.75,\n  envMap: environmentMap,\n  side: THREE.DoubleSide,\n  color: 0x555555, // ダークグレー\n  opacity: 1,\n});\n\nconst copperMaterial = new THREE.MeshPhysicalMaterial({\n  metalness: 1,\n  roughness: 0,\n  envMapIntensity: 1,\n  transmission: 1,\n  ior: 1.75,\n  envMap: environmentMap2,\n  color: 0xffa500,\n  side: THREE.DoubleSide,\n});\n\nconst lightBulbMaterial1 = new THREE.MeshBasicMaterial({ color: 0xfedcbd });\nconst lightBulbMaterial2 = new THREE.MeshBasicMaterial({ color: 0xffa500 });\n\nconst overlayMaterial = new THREE.ShaderMaterial({\n  transparent: true,\n  uniforms: {\n    uAlpha: { value: 1.0 },\n  },\n  vertexShader: overlayVertexShader,\n  fragmentShader: overlayFragmentShader,\n});\n\n/**\n * Custom Models\n */\ngltfLoader.load('/bedroom.glb', (gltf) => {\n  scene.add(gltf.scene);\n  gltf.scene.traverse((child) => {\n    const mesh = child as THREE.Mesh;\n\n    mesh.material = (() => {\n      if (['TableGlass', 'BottledGlass'].includes(mesh.name)) return glassMaterial;\n      if (['BottledLight'].includes(mesh.name)) return lightBulbMaterial1;\n      if (['XtalMetal'].includes(mesh.name)) return copperMaterial;\n      if (['XtalLight'].includes(mesh.name)) {\n        console.log(mesh.position);\n        return lightBulbMaterial2;\n      }\n      if (['Xtal'].includes(mesh.name)) return glassMaterial2;\n      return bakedMaterial;\n    })();\n  });\n});\n\n/**\n * Overlay\n */\nconst overlayGeometry = new THREE.PlaneGeometry(2, 2, 1, 1);\nconst overlay = new THREE.Mesh(overlayGeometry, overlayMaterial);\nscene.add(overlay);\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\nlet previousTime = 0;\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime();\n  const deltaTime = elapsedTime - previousTime;\n  previousTime = elapsedTime;\n\n  raycaster.setFromCamera(mouse, camera);\n\n  controls.update();\n  renderer.render(scene, camera);\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n"],"names":["canvas","scene","THREE.Scene","sizes","camera","THREE.PerspectiveCamera","renderer","THREE.WebGLRenderer","controls","OrbitControls","distance","THREE.Vector3","mouse","THREE.Vector2","event","raycaster","THREE.Raycaster","rayDirection","loadingElement","loadingManager","THREE.LoadingManager","gsap","overlayMaterial","_","itemsLoaded","itemsTotal","progressRatio","textureLoader","THREE.TextureLoader","gltfLoader","GLTFLoader","DRACOLoader","environmentMap","environmentMap2","backGroundEnvironment","THREE.EquirectangularReflectionMapping","THREE.SRGBColorSpace","bakedTexture","bakedMaterial","THREE.MeshBasicMaterial","glassMaterial","THREE.MeshPhysicalMaterial","glassMaterial2","THREE.DoubleSide","copperMaterial","lightBulbMaterial1","lightBulbMaterial2","THREE.ShaderMaterial","overlayVertexShader","overlayFragmentShader","gltf","child","mesh","overlayGeometry","THREE.PlaneGeometry","overlay","THREE.Mesh","clock","THREE.Clock","tick"],"mappings":"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"}