{"version":3,"file":"main-be7cf9f0.js","sources":["../../src/shaders/particles/vertex.glsl","../../src/shaders/particles/fragment.glsl","../../src/shaders/tv/vertex.glsl","../../src/shaders/tv/fragment.glsl","../../src/script.ts"],"sourcesContent":["uniform float uTime;\nuniform float uPixelRatio;\nuniform float uSize;\n\nattribute float aScale;\n\nvoid main()\n{\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n    modelPosition.y += sin(uTime + modelPosition.x * 100.0) * aScale * 0.2;\n\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectionPosition = projectionMatrix * viewPosition;\n\n    gl_Position = projectionPosition;\n    \n    gl_PointSize = uSize * aScale * uPixelRatio;\n    gl_PointSize *= (1.0 / - viewPosition.z);\n}","void main()\n{\n    float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\n    float strength = 0.05 / distanceToCenter - 0.1;\n\n    gl_FragColor = vec4(1.0, 1.0, 1.0, strength);\n}","varying vec2 vUv;\n\nvoid main()\n{\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n    vUv = uv;\n}","uniform float uTime;\n\nvarying vec2 vUv;\n\n\n\nvoid main()\n{\n    gl_FragColor = vec4(vUv, abs(sin(uTime)), 0.8);\n}","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\nimport particlesVertexShader from './shaders/particles/vertex.glsl';\nimport particlesFragmentShader from './shaders/particles/fragment.glsl';\nimport tvVertexShader from './shaders/tv/vertex.glsl';\nimport tvFragmentShader from './shaders/tv/fragment.glsl';\nimport overlayVertexShader from './shaders/overlay/vertex.glsl';\nimport overlayFragmentShader from './shaders/overlay/fragment.glsl';\nimport * as CANNON from 'cannon-es';\nimport CannonDebugger from 'cannon-es-debugger';\nimport gsap from 'gsap';\n\n/**\n * Base\n */\nconst canvas = (document.querySelector('canvas.webgl') || undefined) as HTMLCanvasElement | undefined;\n\nconst scene = new THREE.Scene();\n\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100);\ncamera.position.x = -2;\ncamera.position.y = 6.5;\ncamera.position.z = 4;\nscene.add(camera);\n\nconst renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nwindow.addEventListener('resize', () => {\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n\n  camera.aspect = sizes.width / sizes.height;\n  camera.updateProjectionMatrix();\n\n  renderer.setSize(sizes.width, sizes.height);\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n  particlesMaterial.uniforms.uPixelRatio.value = Math.min(window.devicePixelRatio, 2);\n});\nrenderer.shadowMap.enabled = true;\n\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\ncontrols.minDistance = 2;\ncontrols.maxDistance = 10;\ncontrols.addEventListener('change', () => {\n  const distance = camera.position.distanceTo(new THREE.Vector3(-1.4, 0.18, 0.07));\n  camera.fov = distance * 10;\n  camera.updateProjectionMatrix();\n});\n\nconst mouse = new THREE.Vector2();\nwindow.addEventListener('mousemove', (event) => {\n  mouse.x = (event.clientX / sizes.width) * 2 - 1;\n  mouse.y = -(event.clientY / sizes.height) * 2 + 1;\n});\n\nconst raycaster = new THREE.Raycaster();\nconst rayDirection = new THREE.Vector3(10, 0, 0);\nrayDirection.normalize();\n\n/**\n * Loaders\n */\nconst loadingElement = document.querySelector('.loading');\nconst loadingManager = new THREE.LoadingManager(\n  () => {\n    gsap.to(overlayMaterial.uniforms.uAlpha, {\n      duration: 1,\n      value: 0,\n      delay: 0.3,\n    });\n\n    if (window.innerWidth > 768) {\n      camera.position.x = -3.07;\n      camera.position.y = 0.93;\n      camera.position.z = 3.41;\n\n      gsap.to(camera.position, {\n        duration: 1,\n        x: -5,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        y: 2.2,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        z: 4,\n        delay: 0.3,\n      });\n\n      controls.target.set(-0.5, 1.2, 0);\n    } else {\n      camera.position.x = -3.07;\n      camera.position.y = 0.93;\n      camera.position.z = 3.41;\n\n      gsap.to(camera.position, {\n        duration: 1,\n        x: -1.0,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        y: 3.0,\n        delay: 0.3,\n      });\n      gsap.to(camera.position, {\n        duration: 1,\n        z: 7.2,\n        delay: 0.3,\n      });\n\n      controls.target.set(-1, 1.2, 1);\n    }\n\n    if (!loadingElement) return;\n    setTimeout(() => {\n      loadingElement.remove();\n    }, 3000);\n  },\n  // Progress\n  (_, itemsLoaded, itemsTotal) => {\n    const progressRatio = itemsLoaded / itemsTotal;\n    if (!loadingElement) return;\n    loadingElement.innerHTML = `${Math.round(progressRatio * 100)}%`;\n  }\n);\n\nconst textureLoader = new THREE.TextureLoader(loadingManager);\nconst gltfLoader = new GLTFLoader(loadingManager).setDRACOLoader(new DRACOLoader().setDecoderPath('draco/'));\n\n/**\n * Environment map\n */\nconst environmentMap = textureLoader.load('environment/environment.jpg');\nconst environmentMap2 = textureLoader.load('environment/environment2.jpg');\nconst backGroundEnvironment = textureLoader.load('environment/night_skyscraper.jpg');\nenvironmentMap.mapping = THREE.EquirectangularReflectionMapping;\nenvironmentMap.colorSpace = THREE.SRGBColorSpace;\nenvironmentMap2.mapping = THREE.EquirectangularReflectionMapping;\nenvironmentMap2.colorSpace = THREE.SRGBColorSpace;\nbackGroundEnvironment.mapping = THREE.EquirectangularReflectionMapping;\nbackGroundEnvironment.colorSpace = THREE.SRGBColorSpace;\nscene.background = backGroundEnvironment;\n\n/**\n * Textures\n */\nconst bakedTexture = textureLoader.load('baked.jpg');\nbakedTexture.flipY = false;\nbakedTexture.colorSpace = THREE.SRGBColorSpace;\n\n/**\n * Lights\n */\nconst directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.4);\nconst directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.4);\nconst pointLight1 = new THREE.PointLight(0xf68b1f, 0.5, 1);\ndirectionalLight1.position.set(0, 4, -2);\ndirectionalLight2.position.set(-4, 1, 2);\npointLight1.position.set(-1.112, 0.81, 3.257);\nscene.add(directionalLight1);\nscene.add(directionalLight2);\nscene.add(pointLight1);\n\n/**\n * Materials\n */\nconst bakedMaterial = new THREE.MeshBasicMaterial({ map: bakedTexture });\n\nconst glassMaterial = new THREE.MeshPhysicalMaterial({\n  metalness: 0,\n  roughness: 0,\n  transmission: 0.95,\n  opacity: 1,\n  ior: 1.95,\n  envMap: environmentMap2,\n});\n\nconst glassMaterial2 = new THREE.MeshPhysicalMaterial({\n  metalness: 0,\n  roughness: 0,\n  envMapIntensity: 1,\n  transmission: 0.95,\n  transparent: true,\n  ior: 1.75,\n  envMap: environmentMap,\n  side: THREE.DoubleSide,\n  color: 0x555555, // ダークグレー\n  opacity: 1,\n});\n\n// やや暖色寄りの反射\nconst metalMaterial1 = new THREE.MeshPhysicalMaterial({\n  metalness: 1,\n  roughness: 0,\n  envMapIntensity: 0.9,\n  transmission: 0.95,\n  opacity: 1,\n  ior: 1,\n  envMap: environmentMap,\n  side: THREE.DoubleSide,\n});\n\n// シルバー寄りの反射\nconst metalMaterial2 = new THREE.MeshPhysicalMaterial({\n  metalness: 1,\n  roughness: 0,\n  envMapIntensity: 0.9,\n  transmission: 0.95,\n  opacity: 1,\n  ior: 1,\n  envMap: environmentMap2,\n  side: THREE.DoubleSide,\n});\n\nconst copperMaterial = new THREE.MeshPhysicalMaterial({\n  metalness: 1,\n  roughness: 0,\n  envMapIntensity: 1,\n  transmission: 1,\n  ior: 1.75,\n  envMap: environmentMap2,\n  color: 0xffa500,\n  side: THREE.DoubleSide,\n});\n\nconst sofaMaterial = new THREE.MeshPhysicalMaterial({\n  color: 0x534719,\n  roughness: 0.5,\n});\n\nconst lightBulbMaterial1 = new THREE.MeshBasicMaterial({ color: 0xfedcbd });\nconst lightBulbMaterial2 = new THREE.MeshBasicMaterial({ color: 0xffa500 });\n\nconst particlesMaterial = new THREE.ShaderMaterial({\n  uniforms: {\n    uTime: { value: 0 },\n    uPixelRatio: { value: Math.min(window.devicePixelRatio, 2) },\n    uSize: { value: 100 },\n  },\n  vertexShader: particlesVertexShader,\n  fragmentShader: particlesFragmentShader,\n  transparent: true,\n  blending: THREE.AdditiveBlending,\n  depthWrite: false,\n});\n\nconst tvMonitorMaterial = new THREE.ShaderMaterial({\n  uniforms: {\n    uTime: { value: 0 },\n  },\n  vertexShader: tvVertexShader,\n  fragmentShader: tvFragmentShader,\n  side: THREE.DoubleSide,\n});\n\nconst overlayMaterial = new THREE.ShaderMaterial({\n  transparent: true,\n  uniforms: {\n    uAlpha: { value: 1.0 },\n  },\n  vertexShader: overlayVertexShader,\n  fragmentShader: overlayFragmentShader,\n});\n\n/**\n * Physics\n */\n// const world = new CANNON.World();\n// const setGravity = () => {\n//   world.gravity.set(0, -9.82, -0.5);\n// };\n// setTimeout(setGravity, 4000);\n// setTimeout(() => {\n//   console.log('Allow sleep');\n//   world.allowSleep = true;\n// }, 5000);\n\n// world.broadphase = new CANNON.SAPBroadphase(world);\n// world.allowSleep = false;\n// world.gravity.set(0, 0, 0);\n// // Default material\n// const defaultMaterial = new CANNON.Material('default');\n// const defaultContactMaterial = new CANNON.ContactMaterial(defaultMaterial, defaultMaterial, {\n//   friction: 0,\n//   restitution: 0.3,\n// });\n// world.defaultContactMaterial = defaultContactMaterial;\n// // Floor\n// const floorShape = new CANNON.Plane();\n// const floorBody = new CANNON.Body();\n// floorBody.mass = 0;\n// floorBody.position.set(0, 0, 0);\n// floorBody.addShape(floorShape);\n// floorBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI * 0.5);\n// world.addBody(floorBody);\n// const wallBody = new CANNON.Body();\n// wallBody.mass = 0;\n// wallBody.position.set(0, 0, -3);\n// wallBody.addShape(new CANNON.Plane());\n// wallBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI * 0);\n// world.addBody(wallBody);\n// const cannonDebugger = new CannonDebugger(scene, world);\n\n// // Create box\n// const boxGeometry = new THREE.BoxGeometry(1.1, 2, 0.05);\n// const boxMaterial = new THREE.MeshStandardMaterial({\n//   metalness: 0.3,\n//   roughness: 0.4,\n//   envMapIntensity: 0.5,\n//   map: bakedTexture,\n// });\n// const mesh = new THREE.Mesh(boxGeometry, boxMaterial);\n// mesh.castShadow = true;\n// // mesh.position.set(-6, 0, 0.94);\n// scene.add(mesh);\n// const objectsToUpdate = [];\n// const body = new CANNON.Body({\n//   mass: 1,\n//   position: new CANNON.Vec3(-4, 1.55, -2.94),\n//   shape: new CANNON.Box(new CANNON.Vec3(0.5, 1, 0.025)),\n//   material: defaultMaterial,\n//   quaternion: new CANNON.Quaternion(0, 0, 0.01),\n// });\n\n// world.addBody(body);\n// objectsToUpdate.push({ mesh, body });\n\n/**\n * Custom Models\n */\nlet mixer: THREE.AnimationMixer;\nlet akabeko: THREE.Object3D[];\nlet headAction: THREE.AnimationAction;\ngltfLoader.load('myroom.glb', (gltf) => {\n  scene.add(gltf.scene);\n  gltf.scene.traverse((child) => {\n    const mesh = child as THREE.Mesh;\n\n    mesh.material = (() => {\n      if (['TVReg', 'SofaReg', 'DiningTableReg', 'StepWire'].includes(mesh.name)) return metalMaterial2;\n      if (['BarcelonaBack', 'BarcelonaSeat'].includes(mesh.name)) return sofaMaterial;\n      if (['CoffeeTable', 'BottledGlass', 'FlowerBottle'].includes(mesh.name)) return glassMaterial;\n      if (['LampBulb', 'BottledLight'].includes(mesh.name)) return lightBulbMaterial1;\n      if (['BarcelonaReg'].includes(mesh.name)) return metalMaterial1;\n      if (['XtalMetal'].includes(mesh.name)) return copperMaterial;\n      if (['XtalLight'].includes(mesh.name)) {\n        console.log(mesh.position);\n        return lightBulbMaterial2;\n      }\n      if (['Xtal'].includes(mesh.name)) return glassMaterial2;\n      return bakedMaterial;\n    })();\n\n    akabeko = [gltf.scene.getObjectByName('AkabekoHead'), gltf.scene.getObjectByName('AkabekoBody')].filter((object) => object) as THREE.Object3D[];\n  });\n\n  // Animation\n  mixer = new THREE.AnimationMixer(gltf.scene);\n  headAction = mixer.clipAction(gltf.animations[0]);\n});\n\nconst akabekoAnimation = (state: 'start' | 'stop') => {\n  if (state === 'stop' && !headAction.isRunning()) {\n    headAction.stop();\n    return;\n  }\n  if (headAction.isRunning()) return;\n  headAction.loop = THREE.LoopOnce;\n  headAction.play();\n};\n\n/**\n * Overlay\n */\nconst overlayGeometry = new THREE.PlaneGeometry(2, 2, 1, 1);\nconst overlay = new THREE.Mesh(overlayGeometry, overlayMaterial);\nscene.add(overlay);\n\n/**\n * Particles\n */\nconst particlesGeometry = new THREE.BufferGeometry();\nconst particlesCount = 100;\nconst positionArray = new Float32Array(particlesCount * 3);\nconst scaleArray = new Float32Array(particlesCount);\nfor (let i = 0; i < particlesCount; i++) {\n  positionArray[i * 3 + 0] = (Math.random() - 0.5) * 4;\n  positionArray[i * 3 + 1] = Math.random() * 1.5;\n  positionArray[i * 3 + 2] = (Math.random() - 0.5) * 4;\n  scaleArray[i] = Math.random();\n}\nparticlesGeometry.setAttribute('position', new THREE.BufferAttribute(positionArray, 3));\nparticlesGeometry.setAttribute('aScale', new THREE.BufferAttribute(scaleArray, 1));\nconst particles = new THREE.Points(particlesGeometry, particlesMaterial);\nparticles.position.z = -5;\nparticles.position.y = 0.8;\nscene.add(particles);\n\n/**\n * TV Monitor\n */\nconst tVGeometry = new THREE.PlaneGeometry(0.82, 0.48, 1, 1);\nconst tv = new THREE.Mesh(tVGeometry, tvMonitorMaterial);\ntv.position.set(-1.39, 0.88, -2.59);\ntv.rotateY(0.5235988354713379);\nscene.add(tv);\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\nlet previousTime = 0;\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime();\n  const deltaTime = elapsedTime - previousTime;\n  previousTime = elapsedTime;\n\n  tvMonitorMaterial.uniforms.uTime.value = elapsedTime;\n  particlesMaterial.uniforms.uTime.value = elapsedTime;\n\n  raycaster.setFromCamera(mouse, camera);\n  if (akabeko) {\n    const modelIntersects = raycaster.intersectObjects(akabeko);\n\n    if (modelIntersects.length) {\n      akabekoAnimation('start');\n    } else {\n      akabekoAnimation('stop');\n    }\n  }\n\n  if (mixer) mixer.update(deltaTime);\n\n  // // Update physics\n  // world.step(1 / 60, deltaTime, 3);\n  // for (const object of objectsToUpdate) {\n  //   object.mesh.position.copy(object.body.position);\n  //   object.mesh.quaternion.copy(object.body.quaternion);\n  // }\n  // cannonDebugger.update();\n\n  controls.update();\n  renderer.render(scene, camera);\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n"],"names":["vertex_default","fragment_default","canvas","scene","THREE.Scene","sizes","camera","THREE.PerspectiveCamera","renderer","THREE.WebGLRenderer","particlesMaterial","controls","OrbitControls","distance","THREE.Vector3","mouse","THREE.Vector2","event","raycaster","THREE.Raycaster","rayDirection","loadingElement","loadingManager","THREE.LoadingManager","gsap","overlayMaterial","_","itemsLoaded","itemsTotal","progressRatio","textureLoader","THREE.TextureLoader","gltfLoader","GLTFLoader","DRACOLoader","environmentMap","environmentMap2","backGroundEnvironment","THREE.EquirectangularReflectionMapping","THREE.SRGBColorSpace","bakedTexture","directionalLight1","THREE.DirectionalLight","directionalLight2","pointLight1","THREE.PointLight","bakedMaterial","THREE.MeshBasicMaterial","glassMaterial","THREE.MeshPhysicalMaterial","glassMaterial2","THREE.DoubleSide","metalMaterial1","metalMaterial2","copperMaterial","sofaMaterial","lightBulbMaterial1","lightBulbMaterial2","THREE.ShaderMaterial","particlesVertexShader","particlesFragmentShader","THREE.AdditiveBlending","tvMonitorMaterial","tvVertexShader","tvFragmentShader","overlayVertexShader","overlayFragmentShader","mixer","akabeko","headAction","gltf","child","mesh","object","THREE.AnimationMixer","akabekoAnimation","state","THREE.LoopOnce","overlayGeometry","THREE.PlaneGeometry","overlay","THREE.Mesh","particlesGeometry","THREE.BufferGeometry","particlesCount","positionArray","scaleArray","i","THREE.BufferAttribute","particles","THREE.Points","tVGeometry","tv","clock","THREE.Clock","previousTime","tick","elapsedTime","deltaTime"],"mappings":"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"}